[
["index.html", "极客R：数据分析之道 前言 内容简介 许可 建议与反馈 致谢", " 极客R：数据分析之道 王诗翔, 生信技能树 上次修改 2020-03-29 前言 这是一本 R 语言入门的教程书。它旨在为生物信息学相关方向的研究人员（包括学生）以及相关从业者提供 R 语言基础知识的学习指导。当然，由于本书内容的普适性，我相信对数据科学感兴趣的读者都能够从阅读中受益。如果读者已经掌握了一些 R 的编程知识，可以翻看目录挑选感兴趣的内容阅读；如果读者已经掌握的 R 编程基础知识，我推荐翻看本书的附录部分查找感兴趣的内容进一步深入学习。 R 语言与知名的 C、Python 这类通用编程语言相比，它是一门领域特定语言（domain-specific language、DSL），专注于数据科学领域。由于 Python 的普及以及它在商业、科研分析中的流行，R 语言常常被用来与 Python 作比较。我在此无意做这样的比较，就我的个人使用经验来看，两者都有其独特和独到之处。作为一名数据科学家，我们常常需要掌握多门编程语言作为工具进行工作，其中主要包括 R、Python 和 Shell。R 和 Python 都是作为主要的数据探索、分析和可视化工具，读者任选其一熟练掌握即可。初学者同时学习 R 和 Python 是不可取，因为不同的编程语言都有相似的数据结构和运算控制逻辑，所以深度掌握一门语言能够更好地工作和更快地学习其他编程语言。另外，初学者往往困惑于 R 和 Python 两种语言中哪种更值得学习。就我的个人观点看，对于生物信息学方向的大部分读者，R 是更好的选择，有以下一些理由： R 语言对于没有编程经验的读者更加友好，内置向量化运算机制和默认统计分析包可以快速开始分析和获取结果。 由于 Bioconductor 项目库和 CRAN 库中保存了上千个生物信息学软件包，涉及生物信息学领域的各个方面，读者在实际的研究工作中很难完全离开 R 语言环境。 tidyverse 系列工具包的强力驱动让 R 在数据分析各个方面工作都非常强力。 内容简介 当前已经有不少 R 语言和数据分析相关的教程和书籍，本书无力像它们一样详尽地介绍 R 众多方面的内容，而是聚焦于指导读者学习和理解数据分析的核心要点，并能快速应用到自己实际的工作中。本书的核心内容包括 R 的基础语法和一系列数据分析编程知识，后者将根据 Hadley 在《R for Data Science》提供的数据分析流程概览图 0.1 中指出的核心要点分别按章节进行介绍。最后，我们将通过一些 R 包学习 R 在生物信息学方向的应用。 图 0.1: 数据分析概览 （图源：R for Data Science 第 1 章） 本书的章节概要如下： 第 1 章介绍 R 与相应编程环境的安装和使用。 第 2 章介绍 R 基础编程语法，包括数据结构、控制流程等。 第 3 章介绍如何使用 R 导入常见的数据文件格式。 第 4 章介绍数据清洗操作在 R 中的实现。 第 5 章介绍数据可视化。 第 6 章介绍 R 在统计建模方面的和实践。 第 7 章介绍 R 怎样导出结果和生成分析报告。 第 8 章通过一些包的使用示例介绍 R 在生物信息学方向的应用。 许可 本网站（永久）免费阅读，以 CC 署名-非商业性使用-禁止演绎 4.0 国际协议发行。 建议与反馈 这是我第一次编写比较系统的 R 语言教程，由于个人能力有限，难免存在错误和不当，恳请读者批评指正。目前我在业余时间对本书内容进行积极的开发，如果读者有任何建议，欢迎到 GitHub 仓库 Issue 中进行讨论。 致谢 非常感谢谁谁以及谁谁对我的帮助。 王诗翔 于 上海 "],
["author.html", "作者简介", " 作者简介 王诗翔，生信技能树成员，R 语言爱好者。对编程、数据分析都有比较浓厚的兴趣，喜欢开源与开放的科学。长期在简书发文，连载文集《极客RrR&lt;&lt;-数据分析之道》，并运营微信公众号《优雅R》用于推送数据分析相关知识。 "],
["prepare.html", "第 1 章 准备工作 1.1 R 的下载和安装 1.2 RStudio 的下载和安装 1.3 配置（可选） 1.4 常见问题与方案", " 第 1 章 准备工作 想要在本地计算机上运行 R 语言代码，读者需要安装 R。为了方便 R 语言环境的使用和代码编写，我推荐读者使用 RStudio 公司开发的 R 集成开发环境（IDE）RStudio。 如果读者已经在计算机上安装好 R 和 RStudio，可以跳过本节内容。 如果读者倾向于使用像 VS Code 和 Idea 这样的流行编辑器，请自行安装对应的 R 语言拓展插件。 1.1 R 的下载和安装 点击链接 https://mirrors.tuna.tsinghua.edu.cn/CRAN/ 进入 CRAN 的清华镜像源，选择与自己操作系统对应的 R 进行下载。 Windows 系统用户进入 base 子目录，点击 Download R x.x.x for Windows。 MacOS 系统用户通过镜像地址进入 R for Mac OS X 页面后，点击 R-x.x.x.pkg 进行下载。 Linux 系统发行版众多，且需要一些额外的技术知识，请相应用户请阅读本章【常见问题与方案】一节学习 R 在 Linux 发行版下的安装。 上述的 x.x.x 指代 R 的版本号，目前是 3.6.3（2020-03），以用户下载时的实际版本号为准。 对于 MacOS 系统用户，下载后直接双击一路向下进行傻瓜式操作即可安装成功。 对于 Windows 系统用户，根据笔者几年的安装和使用经验，安装时有一些额外的注意事项： Windows 一般包含多个盘符，请读者尽量不要将 R 安装在 Program files 这样有空格的目录或中文目录下。读者可以自行创建一个专门的工具用于安装 R 以及放置 R 的三方包，如 C:/Tools，见图 1.1。 读者的电脑如果有 SSD 固态硬盘，最好将 R 安装到固态硬盘目录里，因为读写数据快。 一般现在电脑是 64 位的，如果你确定是这样，在安装时有关于 32 位的选项都可以不勾选，如图 1.2。 如果涉及到添加环境变量/路径之类的步骤，勾选添加即可。 以上没提到的，一路点下一步。 图 1.1: 设置安装路径 图 1.2: 只选择 64 位 在 Windows 或 MacOS 下读者如果想要安装含有像 C++ 这样的源码的包，需要安装编译工具如 g++，这些编译工具都被 R 语言团队打包成了 Rtools，如果读者有这方面的需求，请阅读本章【常见问题与方案】一节学习 Rtools 的安装。 1.2 RStudio 的下载和安装 点击链接 https://rstudio.com/products/rstudio/download/ 进入 RStudio 下载界面，根据自己的操作系统选择适合的安装文件进行安装即可，如图 1.3。 图 1.3: 下载 RStudio RStudio 的安装非常简单，没有特别的注意事项，读者可以直接一路点击向下。另外，读者可以自定义 RStudio 的安装路径，这不会影响 R 的使用。 RStudio 安装完成后可以像普通软件一样搜索和双击打开，如图 1.4。 图 1.4: RStudio 界面 下面对 RStudio 的界面进行简单介绍，读者在后续的使用中将会逐渐熟悉。 最上方是菜单栏，所有的功能都可以通过它们找到，没事可以多点一点。 左上方是代码编辑窗口，平时写代码的地方。 左下方是 R 控制台（还有终端和任务设定），我们可以通过控制台键入命令并观察 R 的输出（在代码编辑窗口中通过 Ctrl + Enter 快捷键可以将光标行代码发送到控制台，非常有用）。 整个右方是一些辅助窗口，最重要的是右上方的环境 Environment 窗口（用于展示当前环境中的对象：包括变量、函数等）和下方的 5 个窗口：Files、Plots、Packages、Help 以及 Viewer。 1.3 配置（可选） 下面的说明针对的是 Windows 系统，但对于其他系统也可以进行类似的设定。 Windows 下的 R 默认使用用户文档目录作为家目录（等同于 Linux 中的~），使用系统指定的临时目录作为临时目录，使用安装路径下的 R版本/library 目录作为 R 包存储目录。 如果读者什么都选择默认的， 当你一时安装包过多，或者装了电脑管家之类的管理软件时，系统的临时目录经常会把 RStudio 锁死，导致不能进行读写。 当你想要更新 R 版本时，有时你不得不面临重装所有包的举动（如果你使用几个月，装了几百个包…），或者想其他办法解决。 下面介绍如何创建自定义的临时目录与包目录，这样上面情况都不会发生了。 读者在安装好 R 和 RStudio 后，打开 RStudio，在 R 控制台键入： file.edit(&quot;~/.Rprofile&quot;) 在启动RStudio时，RStudio会首先执行里面的 R 代码，所以我们可以在这里用 R 代码进行配置。 首先在该文档内添加内容： #-------------------------------------------- # Set custom library and temp directory for R # NOTE: please only change following 2 paths # Any Question, please email to # Shixiang Wang &lt;w_shixiang@163.com&gt; #-------------------------------------------- .CUSTOM_LIB = &quot;C:/Tools/R/R_Library&quot; # set your custom library location .TMP = &quot;C:/Tools/R/Rtmp&quot; # set a temp dir for R running # please do not add &#39;/&#39; at the end !!! if(!dir.exists(.CUSTOM_LIB)){ dir.create(.CUSTOM_LIB, recursive = TRUE) } .libPaths(c(.CUSTOM_LIB, .libPaths())) message(&quot;Using library: &quot;, .libPaths()[1]) if(dirname(tempdir()) != .TMP){ if(!dir.exists(.TMP)) dir.create(.TMP, recursive = TRUE) cat(paste0(&quot;TMPDIR = &quot;, .TMP), file=&quot;~/.Renviron&quot;, sep = &quot;\\n&quot;) } message(&quot;Using temp directory: &quot;, .TMP) #--------------------------------------------------- # pacman is optional, you can delete following code # If you wanna use pacman, please read: # &lt;https://www.jianshu.com/p/cb16ded75672&gt; # Basically, # #1, you can use &#39;p_load&#39; to load multiple package into R # like p_load(data.table, dplyr) # #2, you can use &#39;p_get&#39; just to install package # #3, you can use &#39;p_update&#39; to update all packages #--------------------------------------------------- if(!require(pacman)){ install.packages(&quot;pacman&quot;, dependencies = TRUE) } library(pacman) #---------------------------------------------------- 然后根据情况对上述内容中的目录设定进行修改即可。 .CUSTOM_LIB = &quot;C:/Tools/R/R_Library&quot; # set your custom library location .TMP = &quot;C:/Tools/R/Rtmp&quot; # set a temp dir for R running # please do not add &#39;/&#39; at the end !!! pacman 那段代码是可选的，该包是 library() 函数的替代品，使用它安装和管理 R 包更简单。具体的使用方法可以点击阅读我之前的简书文章。 这里为了方便大家使用，我添加了一些必要注释，如果上述配置存在问题，读者可以发邮件给我。 保存后重启 RStudio 或者点击菜单栏 Session 下的 Restart R。 以后 RStudio 每次启动后都会输出读者计算机中 R 包的存储路径和它使用的临时路径。读者如果以后升级 R，只要重装下 R 安装文件就可以了，R 包的目录并不会改动，键入下面的命令可以更新所有的 R 包： p_update() 1.4 常见问题与方案 除了本节目前罗列的问题，读者在学习本章内容时遇到的其他问题都可以通过 GitHub Issue 提出和进行讨论。如果读者提出的是通性问题，将增补到该节。 1.4.1 R 在 Linux 系统下的安装 1.4.1.1 Ubuntu 从源安装 R 下述操作基于在 Ubuntu 18 系统上安装 R 3.5 的实践。 $ 前缀指明命令在 shell 终端中进行。 安装依赖： $ sudo apt-get install xorg-dev libreadline-dev $ sudo apt-get install libcurl4-openssl-dev $ sudo apt-get install libbz2-dev $ sudo apt-get install libcairo2-dev libgtk2.0-dev $ sudo apt-get install texinfo texlive $ wget http://mirrors.ctan.org/fonts/inconsolata.zip $ sudo cp -Rfp inconsolata/* /usr/share/texmf/ $ # 或者 sudo cp -r inconsolata/ /usr/share/texlive/texmf-dist/tex/latex/ $ sudo mktexlsr # 刷新 # 如果没有java解释器，安装下 $ sudo apt-get install default-jdk 下载与安装 R： $ curl -O http://cran.utstat.utoronto.ca/src/base/R-3/R-3.5.0.tar.gz $ tar -zxvf R-3.5.0.tar.gz $ cd R-3.5.0/ $ ./configure --prefix=$HOME/local/R --enable-R-shlib --with-cairo=yes $ # ./configure --with-cairo --with-libpng --with-libtiff --with-jpeglib --enable-R-shlib --prefix=$HOME/local/R $ make $ make install 创建符号链接： $ cd /usr/bin/ $ sudo ln -s $HOME/local/R/bin/Rscript Rscript $ sudo ln -s $HOME/local/R/bin/R R 检查： $ ls -l R* lrwxrwxrwx 1 root root 23 6月 28 17:01 R -&gt; /home/wsx/local/R/bin/R lrwxrwxrwx 1 root root 29 6月 28 17:01 Rscript -&gt; /home/wsx/local/R/bin/Rscript 使用： $ R R version 3.5.0 (2018-04-23) -- &quot;Joy in Playing&quot; Copyright (C) 2018 The R Foundation for Statistical Computing Platform: x86_64-pc-linux-gnu (64-bit) R is free software and comes with ABSOLUTELY NO WARRANTY. You are welcome to redistribute it under certain conditions. Type &#39;license()&#39; or &#39;licence()&#39; for distribution details. Natural language support but running in an English locale R is a collaborative project with many contributors. Type &#39;contributors()&#39; for more information and &#39;citation()&#39; on how to cite R or R packages in publications. Type &#39;demo()&#39; for some demos, &#39;help()&#39; for on-line help, or &#39;help.start()&#39; for an HTML browser interface to help. Type &#39;q()&#39; to quit R. &gt; 如果遇到编译问题和报错，读者可以参考下面两篇博文： ubuntu 上安装 R 的时候遇到的问题总结 CentOS 下 R 的安装 1.4.1.2 CentOS 从源安装 R 下述操作基于在 CentOS 系统上安装 R 3.6 的实践。 $ 前缀指明命令在 shell 终端中进行。 首先切入 root 账户。 安装 R 编译依赖： $ yum-builddep R 消灭界面configure警告：configure: WARNING: neither inconsolata.sty nor zi4.sty found: PDF vignettes and package manuals will not be rendered optimally $ wget http://mirrors.ctan.org/fonts/inconsolata.zip $ Unzip inconsolata.zip $ cp -Rfp inconsolata/* /usr/share/texmf/ $ mktexlsr 下载 R 并解压： $ wget -c https://cran.r-project.org/src/base/R-3/R-3.6.0.tar.gz $ tar zxvf R-3.6.0.tar.gz 编译安装 $ cd R-3.6.0/ $ ./configure --prefix=/home/public/R/R-base --enable-R-shlib --with-cairo=yes 这里 prefix 后面的路径可以自己指定。 然后 $ make $ make install 最后可以把它链接到常用软件位置上去。 $ sudo ln -s /home/public/R/R-basebin/R /bin/R 1.4.2 Rtools 安装 1.4.2.1 Windows 系统 Rtools 点击链接 https://mirrors.tuna.tsinghua.edu.cn/CRAN/ 进入 CRAN 页面，依次点击【Download R for Windows】、【Rtools】，然后选择推荐的版本下载和安装，如图 1.5。 图 1.5: Windows 下 Rtools 的下载 安装时一路点击向下，建议不要修改安装路径，因为 R 的很多编译环境变量设定都指向默认的安装路径，读者如果修改它后续很可能引起不必要的麻烦。 1.4.2.2 MacOS 系统 Rtools 点击链接 https://mirrors.tuna.tsinghua.edu.cn/CRAN/ 进入 CRAN 页面，依次点击【Download R for Mac OS X】、【tools】，然后选择最新版的 clang-x.x.x.pkg 和 gfortran-x.x.x.pkg 下载和安装即可，如图 1.6。 x.x.x 指代版本号，如 8.0.0。 图 1.6: MacOS 下 Rtools 的下载 1.4.3 RStudio Server 安装 RStudio Server 比较好用，适用于安装在小型服务器上以方便多人同时利用服务器的计算资源。需要注意，RStudio Server 的安装需要管理员（root）权限。 点击链接 https://rstudio.com/products/rstudio/download-server/ 进入 RStudio Server 下载页面，针对不同的 Linux 发行版，RStudio 公司已经有良好的文档支持，所以我不再赘述。 在使用 RStudio Server 时我有一个小小的建议，如我在前面的配置一节所说，读者可以自己创建一个专门的目录管理所有的 R 包。并且针对该目录，建议新建一个 Linux 群组以管理它的访问权限。 这里简介一下安装后添加其他人，以增加用户 rotation 为例： $ sudo useradd rotation -d /home/rotation -m -g wsx # 将新增用户添加到你所在群组 $ sudo passwd rotation # 设定初始密码 $ sudo adduser rotation sudo # 给用户添加sudo权限，以方便一些操作 "],
["base.html", "第 2 章 基础语法 2.1 基本数据结构 2.2 控制结构与循环 2.3 函数与函数式编程 2.4 拓展包安装与使用 2.5 常见问题与方案", " 第 2 章 基础语法 “程序 = 算法 + 数据结构”，数据结构是信息的载体，而算法是完成任务所需要的步骤。两者的构造和使用方法形成了编程语言独特的语法。本章先介绍 R 的基本数据结构，然后介绍条件和循环控制，最后介绍函数的创建与拓展包的使用。 2.1 基本数据结构 为了表示现实世界的信息，各类编程语言常包含 3 种基本的数据类型：数值型，包括整数和浮点数；字符型，表示文本信息；逻辑型，也常称为布尔值，表示是非判断，如对与错，是与否。在 R 中，除了这些基本数据类型的实现，为了方便计算工作，R 本身还包含了矩阵、数据框和列表等复杂的数据类型，以支持表示各类常用的数据。 2.1.1 向量 在 R 中，数据运算常通过向量的形式进行。向量是一组同质的信息，如 20 个数字、30 个字符串（与数学术语中的向量类似，但不等同）。单一的信息在此被称为元素。标量可以看作元素数量为 1 的向量。 接下来我们通过向量元素的数据类型来实际地了解和操作它。 2.1.1.1 数值 数值应该可以说是最常用的信息表现形式，如人的身高、年龄。在 R 中使用小学学到的阿拉伯表示法即可创建数值，如圆周率 \\(\\pi\\)： 3.14 #&gt; [1] 3.14 此处 #&gt; 后显示 R 运行代码后的返回结果，[1] 是结果的索引，以辅助用户观测，这里表示结果的第 1 个值是 3.14。 typeof() 与 class() 是两个对于初学者非常有用的函数，它们可以返回数据的类型信息。 typeof(3.14) #&gt; [1] &quot;double&quot; class(3.14) #&gt; [1] &quot;numeric&quot; 在 R 中不需要像其他语言一样区分数值的精度信息，typeof() 返回结果为 double 提示该值是一个浮点数。 在 R 中，任何所见的事物皆为对象，class() 返回对象的类信息，此处是 numeric（数值）。 我们再来看看如何在 R 中表示整数。借助上述两个工具函数，我们不难发现下面的代码与想象不同。 3 #&gt; [1] 3 typeof(3) #&gt; [1] &quot;double&quot; class(3) #&gt; [1] &quot;numeric&quot; typeof() 与 class() 对于 3 的返回结果与 3.14 完全相同！这是因为即便只输入 3，R 也将其作为浮点数对待。 我们可以利用 identical() 函数或 is.integer() 函数进行检查： identical(3, 3.0) #&gt; [1] TRUE is.integer(3) #&gt; [1] FALSE 返回的结果是后面将介绍的逻辑值，TRUE 表示对、FALSE 表示错。因此可以判断 3 并不是整数。 正确的整数表示方法需要在数字后加 L 后缀，如 3L。 is.integer(3L) #&gt; [1] TRUE identical(3L, 3) #&gt; [1] FALSE is.integer() 函数隶属于 is.xxx() 家族，该函数家族用于辅助判断对象是否属于某一类型。读者在 RStudio 中输入 is. 后 RStudio 将智能提示有哪些函数的名字以 is. 开头。 浮点数和整数都是数值，所以下面的代码都会返回 TRUE： is.numeric(3.14) #&gt; [1] TRUE is.numeric(3L) #&gt; [1] TRUE 现实中的数据常成组出现，例如，一组学生的身高。R 使用 c() 函数（c 为 combine 的缩写）对数据进行组合： c(1.70, 1.72, 1.80, 1.66, 1.65, 1.88) #&gt; [1] 1.70 1.72 1.80 1.66 1.65 1.88 这样我们就有了一组身高数据。 利用 R 自带的 mean() 和 sd() 还是我们可以轻易求取这组数据的均值和标准差： # 均值 mean(c(1.70, 1.72, 1.80, 1.66, 1.65, 1.88)) #&gt; [1] 1.735 # 标准差 sd(c(1.70, 1.72, 1.80, 1.66, 1.65, 1.88)) #&gt; [1] 0.08894 上面我们计算时我们重复输入了身高数据，如果在输入时发生了小小的意外，如计算标准差时将 1.65 写成了 1.66，那么我们分析得就不是同一组数据了！虽然说在上述的简单计算不太可能发生这种情况，但如果存在 100 甚至 1000 个数据的重复输入，依靠人眼判断几乎是必然出错的。 一个解决办法是依赖系统自带的复制粘贴机制，但如果一组数据被上百次重复使用，这种办法也不实际。 正确的解决办法是引入一个符号（Symbol），用该符号指代一组数据，然后每次需要使用该数据时，使用符号代替即可。符号在编程语言中也常被称为变量，后面我们统一使用该术语。 上述代码块改写为： heights &lt;- c(1.70, 1.72, 1.80, 1.66, 1.65, 1.88) mean(heights) #&gt; [1] 1.735 sd(heights) #&gt; [1] 0.08894 &lt;- 符号在 R 中称为赋值符号，我们可以将它看作数据的流动方向，这样更方便理解，我们不难猜测到 -&gt; 的写法也是有效的： c(1.70, 1.72, 1.80, 1.66, 1.65, 1.88) -&gt; heights2 heights2 #&gt; [1] 1.70 1.72 1.80 1.66 1.65 1.88 但通常以 &lt;- 的写法为主。 另外，= 符号与 &lt;- 有基本相同的含义，但不常用。如果读者有其他编程语言经验，也可以使用它作为常用赋值符号。两者的区别见本章【常见问题与方案】一节。 R 中变量的命名有一些限制，最重要的就是不要以数字开头： 3ab = 3 #&gt; Error: &lt;text&gt;:1:2: unexpected symbol #&gt; 1: 3ab #&gt; ^ 变量命名有 2 点建议： 对于一些临时使用的变量，以简单为主，如 i、j、k 等。 与数据相关的命名，建议与其信息一致，如上面的代码我使用了 heights，不然在没有注释的情况下，代码的阅读者无法快速理解你写的程序。 另外，长变量的命名通常有 2 个推荐的规则： 骆驼法 以学生身高数据为例，可以写为 studentHeights，它遵循 aBcDeF 这样的构造方式。 蛇形 以下划线作为分隔符，写为 student_heights。 两种写法在 R 中都很常用，读者选择一种即可，重点在于一个 R 脚本中应当保持变量名命名风格的一致。 在了解向量和变量后，我们再来学习下向量的计算方式。 假设我们有两组数据，分别以变量 a 和 b 存储： a &lt;- c(1, 2, 3) b &lt;- c(4, 5, 6) 我们将其堆叠到一起，如图 2.1： 图 2.1: 向量的直观展示 当我们将 a 与 b 相加，结果是什么呢？ a + b #&gt; [1] 5 7 9 两个向量之和是向量元素一一相加组成的向量。如果向量的元素不相同，结果又是如何呢？ 我们将 a 与 4 相加看一看，此时向量堆叠如图 2.2 所示： 图 2.2: 向量不等长图示 a + 4 #&gt; [1] 5 6 7 上述结果与 a + c(4, 4, 4) 相同： a + c(4, 4, 4) #&gt; [1] 5 6 7 因此，如果向量不等长时，短向量会通过重复与长向量先对齐（如图 2.3），然后再相加。 图 2.3: 向量对齐 注意，此过程中，长向量会保持不变，如果出现短向量重复后无法对齐的情况，多余的部分将被扔掉，R 返回结果的同时会抛出一个警告信息。 c(1, 2, 3) + c(4, 5) #&gt; Warning in c(1, 2, 3) + c(4, 5): longer object length #&gt; is not a multiple of shorter object length #&gt; [1] 5 7 7 # 上面的加法等价于 c(1, 2, 3) + c(4, 5, 4) 整个过程称为向量化运算。除了加法，其他任何向量（几何）运算方式都相同。 # 想减 a - b #&gt; [1] -3 -3 -3 # 相除 a / b #&gt; [1] 0.25 0.40 0.50 # 相乘 a * b #&gt; [1] 4 10 18 # 整除 a %/% b #&gt; [1] 0 0 0 # 取余数 a %% b #&gt; [1] 1 2 3 # 平方 a ^ 2 #&gt; [1] 1 4 9 # 取对数 log(a, base = 2) #&gt; [1] 0.000 1.000 1.585 向量化运算的本质是成对的向量元素运算操作。这个特性让 R 在处理数据时非常方便，无论向量元素的个数是多少，在运算时我们都可以将其作为标量对待。 例如，计算数据 heights 的均值和标准差，这里我们直接通过公式而不是 R 自带的函数进行计算： \\[ \\mu = \\frac{\\sum x_i}{n} \\] \\[ sd = \\sqrt\\frac{\\sum(x_i - \\mu)^2}{n - 1} \\] sd 的计算中使用的是 n-1 而不是 n 的原因是我们计算的是样本标准差。 实际操作如下： # 先计算均值 heightsMean &lt;- sum(heights) / length(heights) heightsMean #&gt; [1] 1.735 # 计算标准差 heightsSD &lt;- sqrt( sum( (heights - heightsMean)^ 2) / (length(heights) - 1) ) heightsSD #&gt; [1] 0.08894 将结果与 R 函数计算结果对比： mean(heights) #&gt; [1] 1.735 sd(heights) #&gt; [1] 0.08894 注意，上述我们使用了 R 的一些其他工具函数，length() 用来获取向量的长度，而 sum() 用来获取向量之和，sqrt() 用来计算开方。 初学者可能对于计算中使用的一些计算函数感到陌生，这是非常非常非常正常的，我个人也无法记得所有 R 提供的函数，编程是一门实践课程，读者需要通过使用去熟悉，而无法通过死记硬背掌握。在想要使用自己不知道的函数时，这里有几点建议： 猜测函数名。R 的函数命名方式是有规律可循的，且大体有对应的英文含义，读者不妨先尝试猜一猜函数名，看看是否真的有。 使用 R 的文档系统。R 的文档系统非常丰富，读者可以在 R 控制台 ?numeric 来获取关于 numeric 的相关信息。而 ??numeric 可以进行更为深度的搜索。学会读和理解函数文档是掌握 R 必备的技能。 使用搜索引擎。（初学者）遇到的问题基本都会有人遇到，R 的用户众多，各个博客和论坛都记录了关于 R 的使用和问题讨论，在上述 2 点无法解决问题时，读者不妨多使用搜索引擎查找相关资料。 2.1.1.2 字符串 2.1.1.3 因子 2.1.1.4 逻辑值 2.1.1.5 向量构造 2.1.2 矩阵 2.1.3 数据框 2.1.4 列表 2.2 控制结构与循环 2.3 函数与函数式编程 2.4 拓展包安装与使用 2.5 常见问题与方案 除了本节目前罗列的问题，读者在学习本章内容时遇到的其他问题都可以通过 GitHub Issue 提出和进行讨论。如果读者提出的是通性问题，将增补到该节。 2.5.1 = 与 &lt;- 的区别 "],
["import.html", "第 3 章 数据导入 CSV Excel 常见问题与方案", " 第 3 章 数据导入 瞎扯几句。 CSV Excel 常见问题与方案 除了本节目前罗列的问题，读者在学习本章内容时遇到的其他问题都可以通过 GitHub Issue 提出和进行讨论。如果读者提出的是通性问题，将增补到该节。 "],
["clean.html", "第 4 章 数据清洗 常见问题与方案", " 第 4 章 数据清洗 瞎扯几句。 常见问题与方案 除了本节目前罗列的问题，读者在学习本章内容时遇到的其他问题都可以通过 GitHub Issue 提出和进行讨论。如果读者提出的是通性问题，将增补到该节。 "],
["visualization.html", "第 5 章 数据可视化 常见问题与方案", " 第 5 章 数据可视化 瞎扯几句。 常见问题与方案 除了本节目前罗列的问题，读者在学习本章内容时遇到的其他问题都可以通过 GitHub Issue 提出和进行讨论。如果读者提出的是通性问题，将增补到该节。 "],
["model.html", "第 6 章 统计建模 常见问题与方案", " 第 6 章 统计建模 瞎扯几句。 常见问题与方案 除了本节目前罗列的问题，读者在学习本章内容时遇到的其他问题都可以通过 GitHub Issue 提出和进行讨论。如果读者提出的是通性问题，将增补到该节。 "],
["report.html", "第 7 章 结果展示 图形 表格 RMarkdown Shiny 常见问题与方案", " 第 7 章 结果展示 瞎扯几句。 图形 表格 RMarkdown Shiny 常见问题与方案 除了本节目前罗列的问题，读者在学习本章内容时遇到的其他问题都可以通过 GitHub Issue 提出和进行讨论。如果读者提出的是通性问题，将增补到该节。 "],
["bioapp.html", "第 8 章 生物信息学应用", " 第 8 章 生物信息学应用 瞎扯几句。 "],
["expand-reading.html", "A 拓展阅读 A.1 生信技能树语雀知识库 A.2 图书 A.3 视频 A.4 公众号 A.5 其他资料", " A 拓展阅读 呐，到这里本教程的内容差不多写完了。下面是一些推荐的学习资料，希望能够帮到想要进一步学习的读者。 大部分的资料是英文的，大家一定要根据自己的实际情况选择合适的资料，建立切实可行的学习计划。 A.1 生信技能树语雀知识库 生物信息入门需要了解的十个专题 生物统计从理论到实践 肿瘤外显子数据分析指南 TCGA数据分析指南 生信菜鸟团-每周文献分享 A.2 图书 A.2.1 问题与方案 Cookbook for R 中文版 A.2.2 统计建模 Data Science Live Book Statistical Inference via Data Science - A ModernDive into R and the tidyverse A.2.3 核心集合 R for Data Science Anvanced R R Packages A.2.4 生物信息学 生物信息学生 R 入门教程 A.2.5 R R 语言教程 A.3 视频 生信技能树 B 站视频集 A.4 公众号 生信菜鸟团 生信技能树 biobabble 优雅R A.5 其他资料 Jimmy - GEO 流程 Jimmy - NGS 流程 "],
["references.html", "参考文献", " 参考文献 "]
]
